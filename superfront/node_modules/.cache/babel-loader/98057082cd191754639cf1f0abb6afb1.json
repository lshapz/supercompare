{"ast":null,"code":"var _jsxFileName = \"/Users/laurashapiro/Downloads/Take-Home-Test-2020-02-26/superfront/src/components/ShowAll.js\";\nimport React from 'react';\nimport '../index.css';\nimport MyContext from '../Context';\nimport Supershow from './Supershow';\n\nclass ShowAll extends React.Component {\n  constructor(props) {\n    super(props);\n    debugger; // this.getData = (newData) => {\n    //   this.setState(state => ({\n    //     data: newData\n    //   }));\n    // };\n    // State also contains the updater function so it will\n    // be passed down into the context provider\n\n    console.log(this.context);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.context.data\n    });\n    debugger;\n  }\n\n  render() {\n    console.log(this.state);\n    let goodGuys = this.state.data.filter(item => item.biography.alignment && item.biography.alignment.toLowerCase() === \"good\");\n    let badGuys = this.state.data.filter(item => item.biography.alignment && item.biography.alignment.toLowerCase() === \"bad\");\n    let unknownGuys = this.state.data.filter(item => !item.biography.alignment);\n\n    let sorter = (a, b) => {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    };\n\n    let alphaSupers = goodGuys.sort((a, b) => {\n      if (a.name && b.name) {\n        return sorter(a.name, b.name);\n      } else if (!a.name && b.name) {\n        return sorter(a.biography.fullName, b.name);\n      } else {\n        return sorter(a.biography.fullName, b.biography.fullName);\n      }\n    });\n    let alphaVillains = badGuys.sort((a, b) => {\n      if (a.name && b.name) {\n        return sorter(a.name, b.name);\n      } else if (!a.name && b.name) {\n        return sorter(a.biography.fullName, b.name);\n      } else {\n        return sorter(a.biography.fullName, b.biography.fullName);\n      }\n    });\n    let alphaRest = unknownGuys.sort((a, b) => {\n      if (a.name && b.name) {\n        return sorter(a.name, b.name);\n      } else if (!a.name && b.name) {\n        return sorter(a.biography.fullName, b.name);\n      } else {\n        return sorter(a.biography.fullName, b.biography.fullName);\n      }\n    });\n    let supers = alphaSupers.map((value, index) => {\n      return React.createElement(Supershow, {\n        id: value.id,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    });\n    let villains = alphaVillains.map((value, index) => {\n      return React.createElement(Supershow, {\n        id: value.id,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    });\n    let unknown = alphaRest.map((value, index) => {\n      return React.createElement(Supershow, {\n        id: value.id,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, supers), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, villains), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, unknown));\n  }\n\n}\n\nShowAll.contextType = MyContext;\nexport default ShowAll;","map":{"version":3,"sources":["/Users/laurashapiro/Downloads/Take-Home-Test-2020-02-26/superfront/src/components/ShowAll.js"],"names":["React","MyContext","Supershow","ShowAll","Component","constructor","props","console","log","context","state","data","componentDidMount","setState","render","goodGuys","filter","item","biography","alignment","toLowerCase","badGuys","unknownGuys","sorter","a","b","alphaSupers","sort","name","fullName","alphaVillains","alphaRest","supers","map","value","index","id","villains","unknown","contextType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../index.css';\nimport MyContext from '../Context';\nimport Supershow from './Supershow';\n\nclass ShowAll extends React.Component {\n    static contextType = MyContext;\n  constructor(props) {\n    super(props)\n    debugger\n    // this.getData = (newData) => {\n        //   this.setState(state => ({\n            //     data: newData\n            //   }));\n            // };\n            \n            // State also contains the updater function so it will\n    // be passed down into the context provider\n    \n    console.log(this.context);\n    this.state = {data: []};\n  }\n\n  componentDidMount() {\n      this.setState({data: this.context.data});\n      debugger\n  }\n\n  render() {\n    \n    console.log(this.state);\n\n    let goodGuys = this.state.data.filter(item=> \n      item.biography.alignment && item.biography.alignment.toLowerCase() === \"good\");\n    let badGuys = this.state.data.filter(item=> item.biography.alignment && item.biography.alignment.toLowerCase() === \"bad\");\n    let unknownGuys =  this.state.data.filter(item=> !item.biography.alignment);\n\n\n    let sorter = (a,b) =>{\n      if (a > b) {\n        return 1\n      }\n      if (b > a) {\n        return -1\n      }\n      return 0\n    }\n\n\n    let alphaSupers = goodGuys.sort((a,b)=>{\n      if (a.name && b.name) {\n        return sorter(a.name, b.name)\n      } else if (!a.name && b.name) {\n        return sorter(a.biography.fullName, b.name)\n      } else {\n        return sorter(a.biography.fullName, b.biography.fullName)\n      }\n\n    })\n\n    let alphaVillains = badGuys.sort((a,b)=>{\n      if (a.name && b.name) {\n        return sorter(a.name, b.name)\n      } else if (!a.name && b.name) {\n        return sorter(a.biography.fullName, b.name)\n      } else {\n        return sorter(a.biography.fullName, b.biography.fullName)\n      }\n\n    })\n\n    let alphaRest = unknownGuys.sort((a,b)=>{\n      if (a.name && b.name) {\n        return sorter(a.name, b.name)\n      } else if (!a.name && b.name) {\n        return sorter(a.biography.fullName, b.name)\n      } else {\n        return sorter(a.biography.fullName, b.biography.fullName)\n      }\n\n    })\n\n    let supers = alphaSupers.map((value, index)=>{\n      return <Supershow id={value.id} key={index} />\n    })\n\n    let villains = alphaVillains.map((value, index)=>{\n      return <Supershow id={value.id} key={index} />\n    })\n\n    let unknown = alphaRest.map((value, index)=>{\n      return <Supershow id={value.id} key={index} />\n    })\n\n    return (\n        \n\n        <div className=\"container\"> \n\n        <div> \n          {supers}\n        </div> \n        <div>\n          {villains}\n        </div>\n        <div>\n          {unknown} \n          \n        </div>\n        </div>\n  \n    );\n  }\n}\nexport default ShowAll;\n"]},"metadata":{},"sourceType":"module"}