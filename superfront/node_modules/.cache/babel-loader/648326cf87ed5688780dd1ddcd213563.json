{"ast":null,"code":"import React from 'react'; // import { withRouter } from 'react-router-dom'\n\nimport allSupers from './assets/characters-corrupt.json';\nlet ids = allSupers.map(item => item.id).sort((a, b) => a > b);\nlet newIds = 1;\nlet newSupers = allSupers.map(item => {\n  if (!item.id) {\n    if (!ids.includes(newIds)) {\n      item.id = newIds;\n      ids.push(newIds);\n      newIds += 1;\n    }\n  }\n\n  if (!item.name) {\n    item.name = item.slug.split('-')[1];\n  }\n\n  item.name = item.name.split(' ').map(item => item[0].toUpperCase() + item.slice(1).toLowerCase()).join(' ');\n  return item;\n});\nnewSupers = newSupers.sort((a, b) => {\n  var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n\n  var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n\n  if (nameA < nameB) {\n    return -1;\n  }\n\n  if (nameA > nameB) {\n    return 1;\n  } // names must be equal\n\n\n  return 0;\n}); //   let names = newSupers.map(item=> item.name);\n//   console.log(names)\n\nconst MyContext = React.createContext({\n  data: newSupers,\n  comparators: [],\n  updateComparators: id => {\n    if (this.comparators.includes(id)) {\n      this.comparators.splice(this.comparators.indexOf(id));\n    } else if (this.comparators.length < 2) {\n      this.comparators.push(id);\n    }\n  }\n});\nexport const MyProvider = MyContext.Provider;\nexport const MyConsumer = MyContext.Consumer;\nexport const supers = newSupers;\nexport default MyContext; // export default withRouter(MyContext);","map":{"version":3,"sources":["/Users/laurashapiro/Downloads/Take-Home-Test-2020-02-26/superfront/src/Context.js"],"names":["React","allSupers","ids","map","item","id","sort","a","b","newIds","newSupers","includes","push","name","slug","split","toUpperCase","slice","toLowerCase","join","nameA","nameB","MyContext","createContext","data","comparators","updateComparators","splice","indexOf","length","MyProvider","Provider","MyConsumer","Consumer","supers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,IAAIC,GAAG,GAAGD,SAAS,CAACE,GAAV,CAAcC,IAAI,IAAGA,IAAI,CAACC,EAA1B,EAA8BC,IAA9B,CAAmC,CAACC,CAAD,EAAGC,CAAH,KAAQD,CAAC,GAACC,CAA7C,CAAV;AACA,IAAIC,MAAM,GAAG,CAAb;AAEA,IAAIC,SAAS,GAAGT,SAAS,CAACE,GAAV,CAAcC,IAAI,IAAE;AAChC,MAAI,CAACA,IAAI,CAACC,EAAV,EAAc;AACV,QAAI,CAACH,GAAG,CAACS,QAAJ,CAAaF,MAAb,CAAL,EAA2B;AACvBL,MAAAA,IAAI,CAACC,EAAL,GAAUI,MAAV;AACAP,MAAAA,GAAG,CAACU,IAAJ,CAASH,MAAT;AACAA,MAAAA,MAAM,IAAG,CAAT;AACH;AACJ;;AACD,MAAI,CAACL,IAAI,CAACS,IAAV,EAAgB;AACZT,IAAAA,IAAI,CAACS,IAAL,GAAYT,IAAI,CAACU,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACH;;AACDX,EAAAA,IAAI,CAACS,IAAL,GAAYT,IAAI,CAACS,IAAL,CAAUE,KAAV,CAAgB,GAAhB,EAAqBZ,GAArB,CAAyBC,IAAI,IAAGA,IAAI,CAAC,CAAD,CAAJ,CAAQY,WAAR,KAAwBZ,IAAI,CAACa,KAAL,CAAW,CAAX,EAAcC,WAAd,EAAxD,EAAqFC,IAArF,CAA0F,GAA1F,CAAZ;AAEA,SAAOf,IAAP;AACH,CAde,CAAhB;AAiBEM,SAAS,GAAGA,SAAS,CAACJ,IAAV,CAAe,CAACC,CAAD,EAAGC,CAAH,KAAO;AAChC,MAAIY,KAAK,GAAGb,CAAC,CAACM,IAAF,CAAOG,WAAP,EAAZ,CADgC,CACE;;AAClC,MAAIK,KAAK,GAAGb,CAAC,CAACK,IAAF,CAAOG,WAAP,EAAZ,CAFgC,CAEE;;AAClC,MAAII,KAAK,GAAGC,KAAZ,EAAmB;AACjB,WAAO,CAAC,CAAR;AACD;;AACD,MAAID,KAAK,GAAGC,KAAZ,EAAmB;AACjB,WAAO,CAAP;AACD,GAR+B,CAUhC;;;AACA,SAAO,CAAP;AAED,CAbW,CAAZ,C,CAeF;AACA;;AAKA,MAAMC,SAAS,GAAGtB,KAAK,CAACuB,aAAN,CAAqB;AAACC,EAAAA,IAAI,EAAEd,SAAP;AAAkBe,EAAAA,WAAW,EAAC,EAA9B;AAAkCC,EAAAA,iBAAiB,EAAGrB,EAAD,IAAM;AAC9F,QAAI,KAAKoB,WAAL,CAAiBd,QAAjB,CAA0BN,EAA1B,CAAJ,EAAmC;AAC/B,WAAKoB,WAAL,CAAiBE,MAAjB,CAAwB,KAAKF,WAAL,CAAiBG,OAAjB,CAAyBvB,EAAzB,CAAxB;AACH,KAFD,MAEO,IAAI,KAAKoB,WAAL,CAAiBI,MAAjB,GAA0B,CAA9B,EAAiC;AACpC,WAAKJ,WAAL,CAAiBb,IAAjB,CAAsBP,EAAtB;AACH;AACJ;AANsC,CAArB,CAAlB;AAOA,OAAO,MAAMyB,UAAU,GAAGR,SAAS,CAACS,QAA7B;AACP,OAAO,MAAMC,UAAU,GAAGV,SAAS,CAACW,QAA7B;AACP,OAAO,MAAMC,MAAM,GAAGxB,SAAf;AACP,eAAeY,SAAf,C,CAEA","sourcesContent":["import React from 'react';\n// import { withRouter } from 'react-router-dom'\nimport allSupers from './assets/characters-corrupt.json'; \n\nlet ids = allSupers.map(item=> item.id).sort((a,b)=> a>b);\nlet newIds = 1; \n\nlet newSupers = allSupers.map(item=>{\n    if (!item.id) {\n        if (!ids.includes(newIds)) {\n            item.id = newIds;\n            ids.push(newIds)\n            newIds +=1 \n        }\n    }\n    if (!item.name) {\n        item.name = item.slug.split('-')[1];\n    } \n    item.name = item.name.split(' ').map(item=> item[0].toUpperCase() + item.slice(1).toLowerCase()).join(' ');\n\n    return item;\n})\n\n\n  newSupers = newSupers.sort((a,b)=>{\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n  \n    // names must be equal\n    return 0;\n    \n  })\n\n//   let names = newSupers.map(item=> item.name);\n//   console.log(names)\n\n\n\n\nconst MyContext = React.createContext( {data: newSupers, comparators:[], updateComparators: (id)=>{\n    if (this.comparators.includes(id)) {\n        this.comparators.splice(this.comparators.indexOf(id))\n    } else if (this.comparators.length < 2) {\n        this.comparators.push(id)\n    }\n}})\nexport const MyProvider = MyContext.Provider\nexport const MyConsumer = MyContext.Consumer\nexport const supers = newSupers; \nexport default MyContext;\n\n// export default withRouter(MyContext);"]},"metadata":{},"sourceType":"module"}