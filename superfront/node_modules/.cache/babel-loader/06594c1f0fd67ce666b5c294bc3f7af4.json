{"ast":null,"code":"var _jsxFileName = \"/Users/laurashapiro/Downloads/Take-Home-Test-2020-02-26/superfront/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Context from './Context';\nimport allSupers from './assets/characters-corrupt.json';\nimport Supershow from './components/Supershow';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // this.getData = (newData) => {\n    //   this.setState(state => ({\n    //     data: newData\n    //   }));\n    // };\n    // State also contains the updater function so it will\n    // be passed down into the context provider\n\n    this.state = {\n      data: allSupers\n    };\n  } // componentDidMount() {\n  //     debugger\n  // }\n\n\n  render() {\n    console.log(this.state);\n    let goodGuys = this.state.data.filter(item => item.biography.alignment && item.biography.alignment.toLowerCase() === \"good\");\n    let badGuys = this.state.data.filter(item => item.biography.alignment && item.biography.alignment.toLowerCase() === \"bad\");\n    let unknownGuys = this.state.data.filter(item => !item.biography.alignment);\n\n    let sorter = (a, b) => {\n      if (a > b) {\n        return 1;\n      }\n\n      if (b > a) {\n        return -1;\n      }\n\n      return 0;\n    };\n\n    let alphaSupers = goodGuys.sort((a, b) => {\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n      }\n\n      if (b.name.toLowerCase() > a.name.toLowerCase()) {\n        return -1;\n      }\n\n      return 0;\n    });\n    let alphaVillains = badGuys.sort((a, b) => {\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n      }\n\n      if (b.name.toLowerCase() > a.name.toLowerCase()) {\n        return -1;\n      }\n\n      return 0;\n    });\n    let alphaRest = unknownGuys.sort((a, b) => {\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n      }\n\n      if (b.name.toLowerCase() > a.name.toLowerCase()) {\n        return -1;\n      }\n\n      return 0;\n    });\n    let supers = alphaSupers.map((value, index) => {\n      return React.createElement(Supershow, {\n        id: value.id,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    });\n    let villains = alphaVillains.map((value, index) => {\n      return React.createElement(Supershow, {\n        id: value.id,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    });\n    let unknown = alphaRest.map((value, index) => {\n      return React.createElement(Supershow, {\n        id: value.id,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    });\n    return React.createElement(Context.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, supers), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, villains), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, unknown)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/laurashapiro/Downloads/Take-Home-Test-2020-02-26/superfront/src/App.js"],"names":["React","Context","allSupers","Supershow","App","Component","constructor","props","state","data","render","console","log","goodGuys","filter","item","biography","alignment","toLowerCase","badGuys","unknownGuys","sorter","a","b","alphaSupers","sort","name","alphaVillains","alphaRest","supers","map","value","index","id","villains","unknown"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAEP;AAAP,KAAb;AACD,GAb+B,CAehC;AACA;AACA;;;AAEAQ,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;AAEA,QAAIK,QAAQ,GAAG,KAAKL,KAAL,CAAWC,IAAX,CAAgBK,MAAhB,CAAuBC,IAAI,IACxCA,IAAI,CAACC,SAAL,CAAeC,SAAf,IAA4BF,IAAI,CAACC,SAAL,CAAeC,SAAf,CAAyBC,WAAzB,OAA2C,MAD1D,CAAf;AAEA,QAAIC,OAAO,GAAG,KAAKX,KAAL,CAAWC,IAAX,CAAgBK,MAAhB,CAAuBC,IAAI,IAAGA,IAAI,CAACC,SAAL,CAAeC,SAAf,IAA4BF,IAAI,CAACC,SAAL,CAAeC,SAAf,CAAyBC,WAAzB,OAA2C,KAArG,CAAd;AACA,QAAIE,WAAW,GAAI,KAAKZ,KAAL,CAAWC,IAAX,CAAgBK,MAAhB,CAAuBC,IAAI,IAAG,CAACA,IAAI,CAACC,SAAL,CAAeC,SAA9C,CAAnB;;AAGA,QAAII,MAAM,GAAG,CAACC,CAAD,EAAGC,CAAH,KAAQ;AACnB,UAAID,CAAC,GAAGC,CAAR,EAAW;AACT,eAAO,CAAP;AACD;;AACD,UAAIA,CAAC,GAAGD,CAAR,EAAW;AACT,eAAO,CAAC,CAAR;AACD;;AACD,aAAO,CAAP;AACD,KARD;;AAWA,QAAIE,WAAW,GAAGX,QAAQ,CAACY,IAAT,CAAc,CAACH,CAAD,EAAGC,CAAH,KAAO;AAEjC,UAAID,CAAC,CAACI,IAAF,CAAOR,WAAP,KAAuBK,CAAC,CAACG,IAAF,CAAOR,WAAP,EAA3B,EAAiD;AAC/C,eAAO,CAAP;AACH;;AAED,UAAIK,CAAC,CAACG,IAAF,CAAOR,WAAP,KAAuBI,CAAC,CAACI,IAAF,CAAOR,WAAP,EAA3B,EAAiD;AAC7C,eAAO,CAAC,CAAR;AACH;;AAED,aAAO,CAAP;AAGD,KAbe,CAAlB;AAgBA,QAAIS,aAAa,GAAGR,OAAO,CAACM,IAAR,CAAa,CAACH,CAAD,EAAGC,CAAH,KAAO;AACtC,UAAID,CAAC,CAACI,IAAF,CAAOR,WAAP,KAAuBK,CAAC,CAACG,IAAF,CAAOR,WAAP,EAA3B,EAAiD;AAC/C,eAAO,CAAP;AACH;;AACD,UAAIK,CAAC,CAACG,IAAF,CAAOR,WAAP,KAAuBI,CAAC,CAACI,IAAF,CAAOR,WAAP,EAA3B,EAAiD;AAC7C,eAAO,CAAC,CAAR;AACH;;AACD,aAAO,CAAP;AAEC,KATmB,CAApB;AAWA,QAAIU,SAAS,GAAGR,WAAW,CAACK,IAAZ,CAAiB,CAACH,CAAD,EAAGC,CAAH,KAAO;AACtC,UAAID,CAAC,CAACI,IAAF,CAAOR,WAAP,KAAuBK,CAAC,CAACG,IAAF,CAAOR,WAAP,EAA3B,EAAiD;AAC/C,eAAO,CAAP;AACH;;AACD,UAAIK,CAAC,CAACG,IAAF,CAAOR,WAAP,KAAuBI,CAAC,CAACI,IAAF,CAAOR,WAAP,EAA3B,EAAiD;AAC7C,eAAO,CAAC,CAAR;AACH;;AACD,aAAO,CAAP;AAEC,KATe,CAAhB;AAWA,QAAIW,MAAM,GAAGL,WAAW,CAACM,GAAZ,CAAgB,CAACC,KAAD,EAAQC,KAAR,KAAgB;AAC3C,aAAO,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAED,KAAK,CAACE,EAArB;AAAyB,QAAA,GAAG,EAAED,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFY,CAAb;AAIA,QAAIE,QAAQ,GAAGP,aAAa,CAACG,GAAd,CAAkB,CAACC,KAAD,EAAQC,KAAR,KAAgB;AAC/C,aAAO,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAED,KAAK,CAACE,EAArB;AAAyB,QAAA,GAAG,EAAED,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFc,CAAf;AAIA,QAAIG,OAAO,GAAGP,SAAS,CAACE,GAAV,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAgB;AAC1C,aAAO,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAED,KAAK,CAACE,EAArB;AAAyB,QAAA,GAAG,EAAED,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFa,CAAd;AAIA,WACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE,KAAKxB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGqB,MADH,CAFA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGK,QADH,CALA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,OADH,CARA,CADF,CADF;AAkBD;;AA3G+B;;AA6GlC,eAAe/B,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Context from './Context';\nimport allSupers from './assets/characters-corrupt.json'; \nimport Supershow from './components/Supershow';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // this.getData = (newData) => {\n    //   this.setState(state => ({\n    //     data: newData\n    //   }));\n    // };\n\n    // State also contains the updater function so it will\n    // be passed down into the context provider\n    this.state = {data: allSupers};\n  }\n\n  // componentDidMount() {\n  //     debugger\n  // }\n\n  render() {\n    console.log(this.state);\n\n    let goodGuys = this.state.data.filter(item=> \n      item.biography.alignment && item.biography.alignment.toLowerCase() === \"good\");\n    let badGuys = this.state.data.filter(item=> item.biography.alignment && item.biography.alignment.toLowerCase() === \"bad\");\n    let unknownGuys =  this.state.data.filter(item=> !item.biography.alignment);\n\n\n    let sorter = (a,b) =>{\n      if (a > b) {\n        return 1\n      }\n      if (b > a) {\n        return -1\n      }\n      return 0\n    }\n\n\n    let alphaSupers = goodGuys.sort((a,b)=>{\n\n          if (a.name.toLowerCase() > b.name.toLowerCase()) {\n            return 1;\n        }\n    \n        if (b.name.toLowerCase() > a.name.toLowerCase()) {\n            return -1;\n        }\n    \n        return 0;\n\n\n      }  \n    )\n\n    let alphaVillains = badGuys.sort((a,b)=>{\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n    }\n    if (b.name.toLowerCase() > a.name.toLowerCase()) {\n        return -1;\n    }\n    return 0;\n\n    })\n\n    let alphaRest = unknownGuys.sort((a,b)=>{\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n    }\n    if (b.name.toLowerCase() > a.name.toLowerCase()) {\n        return -1;\n    }\n    return 0;\n\n    })\n\n    let supers = alphaSupers.map((value, index)=>{\n      return <Supershow id={value.id} key={index} />\n    })\n\n    let villains = alphaVillains.map((value, index)=>{\n      return <Supershow id={value.id} key={index} />\n    })\n\n    let unknown = alphaRest.map((value, index)=>{\n      return <Supershow id={value.id} key={index} />\n    })\n\n    return (\n      <Context.Provider value={this.state}>\n        <div className=\"container\"> \n\n        <div> \n          {supers}\n        </div> \n        <div>\n          {villains}\n        </div>\n        <div>\n          {unknown} \n          \n        </div>\n        </div>\n  \n      </Context.Provider>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}